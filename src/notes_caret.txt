#
# Update R to a fresh version
#
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 51716619E084DAB9
sudo apt-get update
sudo apt-get install r-base r-base-dev
#
# install the recuired packages in R, using sudo R
#
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("RANN")
#
#
#-------------------------------
# inspiration from https://www.analyticsvidhya.com/blog/2016/12/practical-guide-to-implement-machine-learning-with-caret-package-in-r-with-practice-problem/

# feature selection from https://www.analyticsvidhya.com/blog/2016/12/introduction-to-feature-selection-methods-with-an-example-or-how-to-select-the-right-variables/
#
# Loading caret package
require("caret")

# Loading training data
train<-read.csv("train_data.csv",stringsAsFactors = T)
# check for missing values
sum(is.na(train))
# preprocess
preProcValues <- preProcess(train, method = c("knnImpute","center","scale"))
require('RANN')
train_processed <- predict(preProcValues, train)
sum(is.na(train_processed))
#Converting outcome variable to numeric
train_processed$Loan_Status<-ifelse(train_processed$Loan_Status=='N',0,1)
id<-train_processed$Loan_ID
train_processed$Loan_ID<-NULL

#Checking the structure of processed train file
str(train_processed)
#Converting every categorical variable to numerical using dummy variables
dmy <- dummyVars(" ~ .", data = train_processed,fullRank = T)
train_transformed <- data.frame(predict(dmy, newdata = train_processed))
#Converting the dependent variable back to categorical
train_transformed$Loan_Status<-as.factor(train_transformed$Loan_Status)

#Checking the structure of transformed train file
str(train_transformed)
#Spliting training set into two parts based on outcome: 75% and 25%
index <- createDataPartition(train_transformed$Loan_Status, p=0.75, list=FALSE)
trainSet <- train_transformed[ index,]
testSet <- train_transformed[-index,]

#Checking the structure of trainSet
str(trainSet)

#Feature selection using rfe in caret
control <- rfeControl(functions = rfFuncs, method = "repeatedcv",repeats = 3,verbose = FALSE)
outcomeName<-'Loan_Status'
predictors<-names(trainSet)[!names(trainSet) %in% outcomeName]

Loan_Pred_Profile <- rfe(trainSet[,predictors], trainSet[,outcomeName], rfeControl = control)

# install e1071 and randomForest and gbm

names(getModelInfo())

model_gbm<-train(trainSet[,predictors],trainSet[,outcomeName],method='gbm')
model_rf<-train(trainSet[,predictors],trainSet[,outcomeName],method='rf')
model_nnet<-train(trainSet[,predictors],trainSet[,outcomeName],method='nnet')
model_glm<-train(trainSet[,predictors],trainSet[,outcomeName],method='glm')


